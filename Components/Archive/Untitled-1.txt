useEffect(() => {
    return onValue(ref(db, 'feuille_match_SM1'), querySnapShot => {
      let result = querySnapShot.val() || {};
      let todoItems = {...result};
      setFeuille(todoItems);
    });
  }, []);



  const Tab = createMaterialTopTabNavigator();

        <Tab.Navigator       
      initialRouteName="Classement"
      screenOptions={{
        tabBarActiveTintColor: '#00A400',
        tabBarInactiveTintColor: 'black',
        tabBarPressColor :'#00A400',
        tabBarLabelStyle: { fontSize: 12 },
        tabBarStyle: { backgroundColor: 'white' },
        tabBarIndicatorStyle: {
            borderBottomColor:'#00A400',
            borderBottomWidth: 3}
          }}       
        >
          <Tab.Screen name="Classement" component={()=> <TeamClassementComponent team={team}/>} />
          <Tab.Screen name="Calendrier" component={()=> <TeamCalendarComponent navigation={navigation} team={team}/>}/>
        </Tab.Navigator>


      <View style={{ flex: 1 }}>
        <View  style={styles.tabContainer}> 
          {tabPressed == 1 ? <TouchableOpacity  style={styles.tabPressed}><Text style={styles.tabPressedText}>Classement</Text></TouchableOpacity>
            : <TouchableOpacity style={styles.tab1} onPress={()=>setTabPressed(1)} ><Text style={styles.tabText}>Classement</Text></TouchableOpacity>
          }
          {tabPressed == 2 ? <TouchableOpacity  style={styles.tabPressed} ><Text style={styles.tabPressedText}>Calendrier</Text></TouchableOpacity>
            : <TouchableOpacity  style={styles.tab1} onPress={()=>setTabPressed(2)} ><Text style={styles.tabText}>Calendrier</Text></TouchableOpacity>
          }
        </View>
        <ScrollView>
        {tabPressed == 1 ? 
        <TeamClassementComponent team={team}/>
        :
        <TeamCalendarComponent navigation={navigation} team={team}/>}
        </ScrollView>
      </View>

+



            <FlatList style={styles.container} horizontal={true}
          data={getWeekEnd(60)}
          
          initialScrollIndex={getWeekEnd(60).length /2 +3}
          initialNumToRender={8}
          renderItem={(item, index) =>
          <View style={styles.dateContainer}>
              {index % 2 == 0 ? <Text style={styles.text}>sam</Text> : <Text style={styles.text}>dim</Text> }
              <Text style={styles.text}>{item.item.substring(0,5)}</Text>
              <Text style={styles.text}>{nbGame(item.item)} match</Text>
          </View>
          }
        />      



        <ScrollView horizontal={true} >
          {arrayAffiche.map((item, index) =>
            <Pressable key={index} onPress={() => {setModalVisible(!modalVisible); setImage(item)}}>       
              <Image  style={{ width: width, height: 230, resizeMode:'contain' }} source={{uri: item}} />
            </Pressable>   
          )}
        </ScrollView>


              <BlurView  tint="dark" intensity={100} style={{position:'absolute',bottom:5,left:3,  padding: 5, borderRadius:10}}>
              </BlurView>



  <Carousel
        style={{border:'none', marginTop:-10}}
            loop
            pagingEnabled={true}
            width={width}
            height={400 }
            autoPlay={true}
            data={arrayActu}
            scrollAnimationDuration={2000}
            mode='parallax'
            //paralaxScrollingScale={2.9}
            //paralaxScrollingOffset={50}
            pinchGestureEnabled={true}
            onSnapToItem={(index) => setCarouselInddex(index)}
            renderItem={({ item, index }) => (
                  <Pressable onPress={() => {setModalVisible(!modalVisible); setImage(item)}}>
                    <Image key={index} style={{  width: width, height: 400,  borderRadius:10, resizeMode:'stretch' }}  source={{uri :item}} />
                  </Pressable>
            )}
        />